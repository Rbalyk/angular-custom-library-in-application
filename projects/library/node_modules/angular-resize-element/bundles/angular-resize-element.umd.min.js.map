{"version":3,"sources":["ng://angular-resize-element/lib/angular-resize-element.enum.ts","ng://angular-resize-element/lib/angular-resize-element.directive.ts","ng://angular-resize-element/lib/angular-resize-element.module.ts"],"names":["TOP","TOP_RIGHT","RIGHT","BOTTOM_RIGHT","BOTTOM","BOTTOM_LEFT","LEFT","TOP_LEFT","AngularResizeElementDirective","prototype","onMouseDown","evt","_this","this","preventDefault","setOriginalData","resizeStart","emit","generateValuesForEvent","mouseUpListener","renderer2","listen","event","onMouseUp","mouseMoveListener","onMouseMove","addClass","elementRef","nativeElement","eventValues","resize","removeClass","applyClass","resizeEnd","originalEvent","targetElement","dataSource","ElementRef","targetElementWidthValue","offsetWidth","targetElementHeightValue","offsetHeight","originalXValue","clientX","originalYValue","clientY","currentWidthValue","currentHeightValue","direction","AngularResizeElementDirection","proportionalResize","originalWidthValue","originalHeightValue","differenceWidthValue","differenceHeightValue","Directive","args","selector","Renderer2","Input","Output","HostListener","EventEmitter","AngularResizeElementModule","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["export enum AngularResizeElementDirection {\r\n    TOP = 'top',\r\n    TOP_RIGHT = 'top-right',\r\n    RIGHT = 'right',\r\n    BOTTOM_RIGHT = 'bottom-right',\r\n    BOTTOM = 'bottom',\r\n    BOTTOM_LEFT = 'bottom-left',\r\n    LEFT = 'left',\r\n    TOP_LEFT = 'top-left'\r\n}\r\n","import {\r\n    Directive,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    Output,\r\n    Renderer2,\r\n} from '@angular/core';\r\nimport {AngularResizeElementEvent} from './angular-resize-element-event.interface';\r\nimport {AngularResizeElementDirection} from './angular-resize-element.enum';\r\n\r\n// @ts-ignore\r\n@Directive({\r\n    selector: '[resize], [resizeStart], [resizeEnd]'\r\n})\r\nexport class AngularResizeElementDirective {\r\n    private mouseUpListener: () => void;\r\n    private mouseMoveListener: () => void;\r\n\r\n    private targetElementWidthValue: number;\r\n    private targetElementHeightValue: number;\r\n\r\n    private originalEvent: MouseEvent;\r\n\r\n    @Input()\r\n    public targetElement: HTMLElement | ElementRef;\r\n\r\n    @Input()\r\n    public direction: AngularResizeElementDirection;\r\n\r\n    @Input()\r\n    public proportionalResize: boolean;\r\n\r\n    @Input()\r\n    public applyClass = 'resizes';\r\n\r\n    @Output()\r\n    public resizeStart: EventEmitter<AngularResizeElementEvent> = new EventEmitter();\r\n\r\n    @Output()\r\n    public resize: EventEmitter<AngularResizeElementEvent> = new EventEmitter();\r\n\r\n    @Output()\r\n    public resizeEnd: EventEmitter<AngularResizeElementEvent> = new EventEmitter();\r\n\r\n\r\n\r\n    constructor(private readonly elementRef: ElementRef,\r\n                private readonly renderer2: Renderer2,\r\n    ) {}\r\n\r\n\r\n\r\n    @HostListener('mousedown', ['$event'])\r\n    public onMouseDown(evt: MouseEvent): void {\r\n        evt.preventDefault();\r\n\r\n        this.setOriginalData(evt);\r\n\r\n        this.resizeStart.emit(this.generateValuesForEvent(evt));\r\n\r\n        this.mouseUpListener = this.renderer2.listen('document', 'mouseup', event => this.onMouseUp(event));\r\n        this.mouseMoveListener = this.renderer2.listen('document', 'mousemove', event => this.onMouseMove(event));\r\n        this.renderer2.addClass(this.elementRef.nativeElement, 'resizes');\r\n    }\r\n\r\n\r\n\r\n    private onMouseUp(evt: MouseEvent): void {\r\n        const eventValues = this.generateValuesForEvent(evt);\r\n        this.resize.emit(eventValues);\r\n        this.mouseMoveListener();\r\n        this.mouseUpListener();\r\n\r\n        this.renderer2.removeClass(this.elementRef.nativeElement, this.applyClass);\r\n        this.resizeEnd.emit(eventValues);\r\n    }\r\n\r\n\r\n\r\n    private onMouseMove(evt: MouseEvent): void {\r\n        this.resize.emit(this.generateValuesForEvent(evt));\r\n    }\r\n\r\n\r\n\r\n    private setOriginalData(originalEvent: MouseEvent) {\r\n        this.originalEvent = originalEvent;\r\n\r\n        if (this.targetElement) {\r\n            const dataSource = this.targetElement instanceof ElementRef ? this.targetElement.nativeElement : this.targetElement;\r\n            this.targetElementWidthValue = dataSource.offsetWidth;\r\n            this.targetElementHeightValue = dataSource.offsetHeight;\r\n\r\n        } else {\r\n            this.targetElementWidthValue = 0;\r\n            this.targetElementHeightValue = 0;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private generateValuesForEvent(evt: MouseEvent): AngularResizeElementEvent {\r\n        const originalXValue = this.originalEvent.clientX;\r\n        const originalYValue = this.originalEvent.clientY;\r\n\r\n        let currentWidthValue = evt.clientX - originalXValue;\r\n        let currentHeightValue = evt.clientY - originalYValue;\r\n\r\n        switch (this.direction) {\r\n            case AngularResizeElementDirection.TOP:\r\n            case AngularResizeElementDirection.TOP_RIGHT: {\r\n                currentHeightValue *= -1;\r\n                break;\r\n            }\r\n            case AngularResizeElementDirection.BOTTOM_LEFT:\r\n            case AngularResizeElementDirection.LEFT: {\r\n                currentWidthValue *= -1;\r\n                break;\r\n            }\r\n            case AngularResizeElementDirection.TOP_LEFT: {\r\n                currentHeightValue *= -1;\r\n                currentWidthValue *= -1;\r\n                break;\r\n            }\r\n        }\r\n\r\n        switch (this.direction) {\r\n            case AngularResizeElementDirection.TOP:\r\n            case AngularResizeElementDirection.BOTTOM: {\r\n                currentWidthValue = 0;\r\n                break;\r\n            }\r\n            case AngularResizeElementDirection.RIGHT:\r\n            case AngularResizeElementDirection.LEFT: {\r\n                currentHeightValue = 0;\r\n                break;\r\n            }\r\n        }\r\n\r\n        currentWidthValue += this.targetElementWidthValue;\r\n        currentHeightValue += this.targetElementHeightValue;\r\n\r\n        if (this.proportionalResize) {\r\n            if (currentWidthValue > currentHeightValue) {\r\n                currentWidthValue = currentHeightValue;\r\n            } else {\r\n                currentHeightValue = currentWidthValue;\r\n            }\r\n        }\r\n\r\n        return {\r\n            originalEvent: this.originalEvent,\r\n            currentWidthValue: currentWidthValue,\r\n            currentHeightValue: currentHeightValue,\r\n            originalWidthValue: this.targetElementWidthValue,\r\n            originalHeightValue: this.targetElementHeightValue,\r\n            differenceWidthValue: this.targetElementWidthValue - currentWidthValue,\r\n            differenceHeightValue: this.targetElementHeightValue - currentHeightValue,\r\n            direction: this.direction,\r\n        };\r\n    }\r\n}\r\n\r\n","import {NgModule} from '@angular/core';\r\nimport {AngularResizeElementDirective} from './angular-resize-element.directive';\r\n\r\n@NgModule({\r\n    declarations: [AngularResizeElementDirective],\r\n    imports: [],\r\n    exports: [AngularResizeElementDirective]\r\n})\r\nexport class AngularResizeElementModule { }\r\n"]}