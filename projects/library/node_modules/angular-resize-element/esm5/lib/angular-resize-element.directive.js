/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, HostListener, Input, Output, Renderer2, } from '@angular/core';
import { AngularResizeElementDirection } from './angular-resize-element.enum';
// @ts-ignore
var AngularResizeElementDirective = /** @class */ (function () {
    function AngularResizeElementDirective(elementRef, renderer2) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.applyClass = 'resizes';
        this.resizeStart = new EventEmitter();
        this.resize = new EventEmitter();
        this.resizeEnd = new EventEmitter();
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    AngularResizeElementDirective.prototype.onMouseDown = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        var _this = this;
        evt.preventDefault();
        this.setOriginalData(evt);
        this.resizeStart.emit(this.generateValuesForEvent(evt));
        this.mouseUpListener = this.renderer2.listen('document', 'mouseup', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.onMouseUp(event); }));
        this.mouseMoveListener = this.renderer2.listen('document', 'mousemove', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.onMouseMove(event); }));
        this.renderer2.addClass(this.elementRef.nativeElement, 'resizes');
    };
    /**
     * @private
     * @param {?} evt
     * @return {?}
     */
    AngularResizeElementDirective.prototype.onMouseUp = /**
     * @private
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        /** @type {?} */
        var eventValues = this.generateValuesForEvent(evt);
        this.resize.emit(eventValues);
        this.mouseMoveListener();
        this.mouseUpListener();
        this.renderer2.removeClass(this.elementRef.nativeElement, this.applyClass);
        this.resizeEnd.emit(eventValues);
    };
    /**
     * @private
     * @param {?} evt
     * @return {?}
     */
    AngularResizeElementDirective.prototype.onMouseMove = /**
     * @private
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        this.resize.emit(this.generateValuesForEvent(evt));
    };
    /**
     * @private
     * @param {?} originalEvent
     * @return {?}
     */
    AngularResizeElementDirective.prototype.setOriginalData = /**
     * @private
     * @param {?} originalEvent
     * @return {?}
     */
    function (originalEvent) {
        this.originalEvent = originalEvent;
        if (this.targetElement) {
            /** @type {?} */
            var dataSource = this.targetElement instanceof ElementRef ? this.targetElement.nativeElement : this.targetElement;
            this.targetElementWidthValue = dataSource.offsetWidth;
            this.targetElementHeightValue = dataSource.offsetHeight;
        }
        else {
            this.targetElementWidthValue = 0;
            this.targetElementHeightValue = 0;
        }
    };
    /**
     * @private
     * @param {?} evt
     * @return {?}
     */
    AngularResizeElementDirective.prototype.generateValuesForEvent = /**
     * @private
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        /** @type {?} */
        var originalXValue = this.originalEvent.clientX;
        /** @type {?} */
        var originalYValue = this.originalEvent.clientY;
        /** @type {?} */
        var currentWidthValue = evt.clientX - originalXValue;
        /** @type {?} */
        var currentHeightValue = evt.clientY - originalYValue;
        switch (this.direction) {
            case AngularResizeElementDirection.TOP:
            case AngularResizeElementDirection.TOP_RIGHT: {
                currentHeightValue *= -1;
                break;
            }
            case AngularResizeElementDirection.BOTTOM_LEFT:
            case AngularResizeElementDirection.LEFT: {
                currentWidthValue *= -1;
                break;
            }
            case AngularResizeElementDirection.TOP_LEFT: {
                currentHeightValue *= -1;
                currentWidthValue *= -1;
                break;
            }
        }
        switch (this.direction) {
            case AngularResizeElementDirection.TOP:
            case AngularResizeElementDirection.BOTTOM: {
                currentWidthValue = 0;
                break;
            }
            case AngularResizeElementDirection.RIGHT:
            case AngularResizeElementDirection.LEFT: {
                currentHeightValue = 0;
                break;
            }
        }
        currentWidthValue += this.targetElementWidthValue;
        currentHeightValue += this.targetElementHeightValue;
        if (this.proportionalResize) {
            if (currentWidthValue > currentHeightValue) {
                currentWidthValue = currentHeightValue;
            }
            else {
                currentHeightValue = currentWidthValue;
            }
        }
        return {
            originalEvent: this.originalEvent,
            currentWidthValue: currentWidthValue,
            currentHeightValue: currentHeightValue,
            originalWidthValue: this.targetElementWidthValue,
            originalHeightValue: this.targetElementHeightValue,
            differenceWidthValue: this.targetElementWidthValue - currentWidthValue,
            differenceHeightValue: this.targetElementHeightValue - currentHeightValue,
            direction: this.direction,
        };
    };
    AngularResizeElementDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[resize], [resizeStart], [resizeEnd]'
                },] }
    ];
    /** @nocollapse */
    AngularResizeElementDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    AngularResizeElementDirective.propDecorators = {
        targetElement: [{ type: Input }],
        direction: [{ type: Input }],
        proportionalResize: [{ type: Input }],
        applyClass: [{ type: Input }],
        resizeStart: [{ type: Output }],
        resize: [{ type: Output }],
        resizeEnd: [{ type: Output }],
        onMouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }]
    };
    return AngularResizeElementDirective;
}());
export { AngularResizeElementDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AngularResizeElementDirective.prototype.mouseUpListener;
    /**
     * @type {?}
     * @private
     */
    AngularResizeElementDirective.prototype.mouseMoveListener;
    /**
     * @type {?}
     * @private
     */
    AngularResizeElementDirective.prototype.targetElementWidthValue;
    /**
     * @type {?}
     * @private
     */
    AngularResizeElementDirective.prototype.targetElementHeightValue;
    /**
     * @type {?}
     * @private
     */
    AngularResizeElementDirective.prototype.originalEvent;
    /** @type {?} */
    AngularResizeElementDirective.prototype.targetElement;
    /** @type {?} */
    AngularResizeElementDirective.prototype.direction;
    /** @type {?} */
    AngularResizeElementDirective.prototype.proportionalResize;
    /** @type {?} */
    AngularResizeElementDirective.prototype.applyClass;
    /** @type {?} */
    AngularResizeElementDirective.prototype.resizeStart;
    /** @type {?} */
    AngularResizeElementDirective.prototype.resize;
    /** @type {?} */
    AngularResizeElementDirective.prototype.resizeEnd;
    /**
     * @type {?}
     * @private
     */
    AngularResizeElementDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    AngularResizeElementDirective.prototype.renderer2;
}
//# sourceMappingURL=data:application/json;base64,